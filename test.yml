name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
      fail-fast: false  # Continue with other versions if one fails

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry config virtualenvs.create false

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root

    - name: Run linting
      run: |
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 . --count --exit-zero --max-complexity=10 --statistics

    - name: Run tests with coverage
      run: |
        # Run non-GPU tests first
        poetry run pytest -v -m "not gpu" --cov=. --cov-report=term-missing
        
        # Run health checks
        poetry run pytest -v -m health
        
        # Run validation tests
        poetry run pytest -v -m validation
        
        # Run text processing tests
        poetry run pytest -v -m text_processing
        
        # Generate final coverage report
        poetry run pytest --cov=. --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        verbose: true

    - name: Check Poetry lock file is up to date
      run: poetry lock --check

    - name: Test API startup
      run: |
        poetry run python -c "from embed_endpoint import app, Settings; from fastapi.testclient import TestClient; client = TestClient(app); response = client.get('/health'); assert response.status_code == 200; print('API startup test passed')"

